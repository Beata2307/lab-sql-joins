/*
1. List the number of films per category.
2. Retrieve the store ID, city, and country for each store.
3. Calculate the total revenue generated by each store in dollars.
4. Determine the average running time of films for each category.
*/
use sakila;

select cat.name as category_name, count(*) as number_of_films_per_category 
from film_category fc
inner join category as cat
	on fc.category_id = cat.category_id
group by cat.name;

-- 2. Retrieve the store ID, city, and country for each store.
select s.store_id, a.address, c.city, co.country
from store as s
inner join address as a
	on s.address_id = a.address_id
inner join city as c
	on a.city_id = c.city_id
inner join country as co
	on c.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars
select s.store_id, sum(amount) as Total_revenue
from store as s
inner join staff 
	on s.store_id = staff.store_id
inner join payment as p
	on staff.staff_id = p.staff_id
group by s.store_id;

select s.store_id, sum(amount) as Total_revenue
from store as s
inner join customer c 
	on s.store_id = c.store_id
inner join payment as p
	on c.customer_id = p.customer_id
group by s.store_id;

select *, sum(total_sales) over () from sales_by_store;

-- 4. Determine the average running time of films for each category.
select  cat.name, avg(f.length) as Average_running_time
from film_category as fc
inner join category as cat
	on fc.category_id = cat.category_id
inner join film f
	on fc.film_id = f.film_id
group by cat.name;


/* Bonus: */
-- 5. Identify the film categories with the longest average running time.

select cat.name, avg(f.length) as Average_running_time
from film_category as fc
inner join category as cat
	on fc.category_id = cat.category_id
inner join film f
	on fc.film_id = f.film_id
group by cat.name
order by Average_running_time desc;


-- 6. Display the top 10 most frequently rented movies in descending order.

select f.title, count(title) as rental_frequency
from rental as r
inner join inventory as inv
	using (inventory_id)
inner join film as f
	using (film_id)
group by f.title
order by rental_frequency desc
limit 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
select 
title,
store_id,
if(inv.store_id = 1, 'yes','no') as can_be_rented
from (
    select film_id, title from film
	where title = 'Academy Dinosaur'
    ) as ft
inner join inventory as inv
	on ft.film_id = inv.film_id
group by inv.store_id;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

select
  film.film_id,
  film.title,
  case
    when count(inv.inventory_id) = 0 then 'NOT available'
    else'Available'
  end as availability_status
from
  film
left join inventory as inv
	using (film_id)
group by film.film_id, film.title;

